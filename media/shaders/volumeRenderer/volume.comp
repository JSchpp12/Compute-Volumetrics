#version 450

struct Light_Type{
	uint point; 
	uint directional; 
	uint spot;
};

struct Light{
	vec4 position;
	vec4 direction;

	//properties
	vec4 ambient; 
	vec4 diffuse;
	vec4 specular; 
	//controls.x = inner cutoff angle 
	//controls.y = outer cutoff angle
	vec4 controls; 
	//settings.x = enabled
	//settings.y = type
	uvec4 settings; 
};

layout(set = 0, binding = 0, rgba8) uniform readonly image2D inputSceneColor; 
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D outputImage; 
layout(set = 0, binding = 2) uniform additionalCamerainfo{
	vec2 cameraDimensions; 
	float aspectRatio;
}; 

layout(set = 1, binding = 0) uniform GlobalUniformBufferObject {
	mat4 proj;
	mat4 view;  
	mat4 inverseView; 
	int numLights;
} globalUbo;

layout(set = 1, binding = 1) uniform aabbInfo{
    vec4 bounds[2];
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in; 


struct Ray {
	vec4 origin; 
	vec4 direction; 
};

// Ray getRayForPixel(const uint x, const uint y){
// 	return Ray(); 
// }

void main(){
    uint target_x = (gl_LocalInvocationID.x) + ((gl_WorkGroupID.x) * 16); 
    uint target_y = (gl_LocalInvocationID.y) + ((gl_WorkGroupID.y) * 16); 

    vec4 imgColor = vec4(imageLoad(inputSceneColor, ivec2(target_x, target_y))); 
    imageStore(outputImage, ivec2(target_x, target_y), imgColor); 
}