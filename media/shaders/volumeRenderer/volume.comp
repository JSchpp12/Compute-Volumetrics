#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

struct Light_Type
{
    uint point;
    uint directional;
    uint spot;
};

struct Light
{
    vec4 position;
    vec4 direction;

    // properties
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    // controls.x = inner cutoff angle
    // controls.y = outer cutoff angle
    vec4 controls;
    // settings.x = enabled
    // settings.y = type
    uvec4 settings;
};

layout(set = 0, binding = 0) uniform GlobalUniformBufferObject
{
    mat4 proj;
    mat4 view;
    mat4 inverseView;
    int numLights;
}
globalUbo;

layout(set = 0, binding = 1) readonly buffer GlobalLightBuffer{
    Light lights[];
}
globalLights;

layout(set = 1, binding = 0) uniform additionalCameraInfo
{
    mat4 inverseProjMatrix;
    vec2 cameraDimensions;
    float aspectRatio;
    float farClipDist;
    float nearClipDist;
    float scale;
}
addCamInfo;
layout(set = 1, binding = 1, r32f) uniform readonly image3D sampledVolume;

layout(set = 2, binding = 0, rgba8) uniform readonly image2D inputSceneColor;
layout(set = 2, binding = 1) uniform sampler2D inputSceneDepth;
layout(set = 2, binding = 2, rgba8) uniform writeonly image2D outputImage;

layout(set = 3, binding = 0) uniform InstanceModelMatrix
{
    mat4 modelMatrix[1024];
};

layout(set = 3, binding = 1) uniform aabbInfo
{
    vec4 bounds[2];
}
aabb;

layout(set = 3, binding = 2) uniform FogControllerInfo
{
    float linearFog_nearDistance;
    float linearFog_farDistance;
    float expFog_density;
    float marchedFog_defaultDensity;
    float marchedFog_sigmaAbsorption;
    float marchedFog_sigmaScattering;
    float marchedFog_lightPropertyDirG;
    float marchedFog_stepSizeDist;
    float marchedFog_stepSizeDist_light;
}
fogInfo;

struct Ray
{
    vec4 origin;
    vec4 direction;
    vec4 invDirection;
    bool signed[3];
};

Ray createRay(const vec4 origin, const vec4 direction)
{
    vec3 invDir = vec3(1.0 / direction.x, 1.0 / direction.y, 1.0 / direction.z);

    return Ray(origin, direction, vec4(invDir, 0.0),
               bool[3](bool(invDir.x < 0), bool(invDir.y < 0), bool(invDir.z < 0)));
}

vec4 getClipSpaceCoordsFromPixel(const ivec2 pixelCoords, const float ndz){
    // 1) Build NDC coordinates in [−1, +1]
    float ndcX = ((float(pixelCoords.x) + 0.5) / addCamInfo.cameraDimensions.x) * 2.0 - 1.0;
    float ndcY = ((float(pixelCoords.y) + 0.5) / addCamInfo.cameraDimensions.y) * 2.0 - 1.0;

    // Vulkan's Y axis is flipped compared to OpenGL
    ndcY = -ndcY; 

    // 2) Reconstruct clip-space with Z = −1 (the near plane), W = 1
    return vec4(ndcX, ndcY, ndz, 1.0);
}

vec4 getWorldPositionFromClip(const vec4 clipCoords){
    // 3) Go back to view-space:
    vec4 viewPositionWorld = addCamInfo.inverseProjMatrix * clipCoords;

    return viewPositionWorld / viewPositionWorld.w; 
}

vec4 getWorldViewDirection(const vec4 viewPositionWorld){
    return vec4(normalize((globalUbo.inverseView * vec4(viewPositionWorld.xyz, 0.0)).xyz), 0);
}

vec4 getWorldOrigin(){
    return vec4((globalUbo.inverseView * vec4(0.0, 0.0, 0.0, 1.0)).xyz, 1.0);
}

ivec2 getTargetPixelCoords()
{
    return ivec2((gl_LocalInvocationID.x) + ((gl_WorkGroupID.x) * 8),
                 (gl_LocalInvocationID.y) + ((gl_WorkGroupID.y) * 8));
}

float linearizeDepth(const float depth, const float camNearClipDist, const float camFarClipDist)
{
    /* convert depth value back to linear space -- based on proj matrix
    Source: http://www.songho.ca/opengl/gl_projectionmatrix.html
    Source2: https://learnopengl.com/Advanced-OpenGL/Depth-testing
    */
    return (camNearClipDist * camFarClipDist) / (camFarClipDist - depth * (camFarClipDist - camNearClipDist));
}

bool checkForThreadOutsideOfTarget()
{
    ivec2 imageSize = imageSize(inputSceneColor);
    uvec2 coords = gl_GlobalInvocationID.xy;
    if (coords.x > imageSize.x || coords.y > imageSize.y)
    {
        return false;
    }

    return true;
}

bool rayBoxIntersect(Ray ray, inout float t0, inout float t1)
{
    vec4 traAABBBounds[2] = vec4[2](vec4(modelMatrix[0] * aabb.bounds[0]), vec4(modelMatrix[0] * aabb.bounds[1]));

    float tmin = -(1.0 / 0.0);
    float tmax = (1.0 / 0.0);
    float txmin = 0, txmax = 0, tymin = 0, tymax = 0, tzmin = 0, tzmax = 0;

    txmin = (traAABBBounds[int(ray.signed[0])].x - ray.origin.x) * ray.invDirection.x;
    txmax = (traAABBBounds[int(!ray.signed[0])].x - ray.origin.x) * ray.invDirection.x;

    tmin = min(txmin, txmax);
    tmax = max(txmin, txmax);

    tymin = (traAABBBounds[int(ray.signed[1])].y - ray.origin.y) * ray.invDirection.y;
    tymax = (traAABBBounds[int(!ray.signed[1])].y - ray.origin.y) * ray.invDirection.y;

    tmin = max(tmin, min(tymin, tymax));
    tmax = min(tmax, max(tymin, tymax));

    tzmin = (traAABBBounds[int(ray.signed[2])].z - ray.origin.z) * ray.invDirection.z;
    tzmax = (traAABBBounds[int(!ray.signed[2])].z - ray.origin.z) * ray.invDirection.z;

    tmin = max(tmin, min(tzmin, tzmax));
    tmax = min(tmax, max(tzmin, tzmax));

    t0 = tmin;
    t1 = tmax;

    return tmax >= max(0.0, tmin);
}

float applyHenyeyGreensteinPhase(const vec3 viewDirection, const vec3 lightDirection, const float gValue){
    const float cosTheta = dot(viewDirection, lightDirection); 
    const float denom = pow(1 + gValue * gValue - 2 * gValue * cosTheta, 1.5);
    return float(1) / (4 * radians(180)) * (1 - gValue * gValue) / denom; 
}

vec4 forwardMarch(const vec3 viewDirection, const vec3 backgroundColor, const Ray ray, const float t0, const float t1,
                  const float sigmaAbsorption, const float sigmaScattering, const float lightPropertyDir_g,
                  const float density, const float cutOffDistance)
{
    vec4 resultingColor = vec4(backgroundColor, 1.0); 
	float transparency = 1;

    const int fittedNumSteps = int(floor((t1 - t0) / fogInfo.marchedFog_stepSizeDist));
    const float fittedStepSize = (t1 - t0) / fittedNumSteps; 

    for (int i = 0; i < fittedNumSteps; i++){
        // setting to middle
        float t = t0 + fittedStepSize * (i + 0.5f);

        //check if march is beyond where the cutoff point should be
        if (t > cutOffDistance){
            break;
        }

		vec4 position = vec4(ray.origin.xyz + (t / ray.invDirection.xyz), 1); 
		float beerExpTrans = exp(-fittedStepSize * density * (sigmaAbsorption + sigmaScattering)); 

		transparency *= beerExpTrans;

		for (int j = 0; j < globalUbo.numLights; j++){
			Ray rayToLight = createRay(position, vec4(normalize(globalLights.lights[j].position.xyz - position.xyz), 0));

            float lt0 = 0;
            float lt1 = 0;  
            if (rayBoxIntersect(rayToLight, lt0, lt1)){ 
                const float fittedStepSizeToLight = (lt1 - lt0) / fogInfo.marchedFog_stepSizeDist_light;
                const int fittedNumStepsLight = int(floor((lt1 - lt0) / fittedStepSizeToLight));

                float sumLightSampleDensities = 0; 
                for (int k = 0; k < fittedNumStepsLight; k++){
                    //cant remember why there is a 0.5 here.......
                    float tLight = fittedStepSizeToLight * (k + 0.5); 

                    const vec4 lightTracePosition = vec4(rayToLight.origin.xyz + (tLight / rayToLight.invDirection.xyz), 1); 
                    sumLightSampleDensities += density;
                }

                const float lightAtten = exp(-sumLightSampleDensities * -lt1 * (sigmaAbsorption + sigmaScattering)); 
                const float phaseResult = lightAtten * applyHenyeyGreensteinPhase(position.xyz, rayToLight.direction.xyz, lightPropertyDir_g) * density * fittedStepSizeToLight;

                resultingColor = resultingColor + (globalLights.lights[j].ambient * phaseResult); 
            }
		}
    }

    return resultingColor * transparency; 
}

void main()
{
    if (!checkForThreadOutsideOfTarget())
        return;

    const ivec2 targetPixel = getTargetPixelCoords();
    float targetPixelInputDepth = texelFetch(inputSceneDepth, targetPixel, 0).r;

    const vec4 clipSpace = getClipSpaceCoordsFromPixel(targetPixel, targetPixelInputDepth); 
    const vec4 viewPositionWorld = getWorldPositionFromClip(clipSpace);
    const vec4 orgWorld = getWorldOrigin(); 
    const vec4 viewDirectionWorld = getWorldViewDirection(viewPositionWorld); 
    const float worldDepthDistance = length(viewPositionWorld.xyz - viewDirectionWorld.xyz); 
    Ray camRay = createRay(orgWorld, viewDirectionWorld);

    const vec3 imgColor = vec3(imageLoad(inputSceneColor, targetPixel).rgb);
    vec4 resultingColor = vec4(imgColor, 1.0);

    float t0 = 0;
    float t1 = 0;

    if (rayBoxIntersect(camRay, t0, t1) && t0 < worldDepthDistance){
        //need to get world distance from depth buffer value 
        //ray marching algorithm happens in world space...
        // const float worldCutoffPoint = camRay.origin + camRay.direction 
        
        resultingColor = forwardMarch(
            viewDirectionWorld.xyz, 
            imgColor, camRay, t0, t1,
                                     fogInfo.marchedFog_sigmaAbsorption, fogInfo.marchedFog_sigmaScattering,
                                     fogInfo.marchedFog_lightPropertyDirG, fogInfo.marchedFog_defaultDensity, 
                                     worldDepthDistance);
    }

    imageStore(outputImage, targetPixel, resultingColor);
}